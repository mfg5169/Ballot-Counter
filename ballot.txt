#include "ballot.h"
#include "helpers.h"

#include <211.h>

#include <ctype.h>
#include <stdbool.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

// A `ballot_t` (defined in `ballot.h`) is be a pointer to a
// heap-allocated `struct ballot`, with the following invariant:
//
//  - `length <= MAX_CANDIDATES`
//
//  - the first `length` elements of `entries` are initialized
//
//  - the `name` field of each of the first `length` entries is non-NULL
//    and points to an OWNED, heap-allocated string containing only
//    letters, all of which are uppercase (a la isupper(3)).
//
// The remaining elements of `entries` (`MAX_CANDIDATES - length`)
// should be considered uninitialized.

struct entry
{
    char* name;
    bool active;
};

struct ballot
{
    size_t length;
    struct entry entries[MAX_CANDIDATES];
};


ballot_t ballot_create(void)
{
    ballot_t ballot_map = malloc(sizeof (struct ballot)); //allocates new, empty ballot

    if (ballot_map == NULL) {

        fprintf(stderr, "couldn't allocate memory for ballot");
        
        exit(1);
        
    } else {
    
        ballot_map->length = 0;

        return ballot_map;

    }
}

void ballot_destroy(ballot_t ballot)
{
    if (ballot != NULL || ballot != 0) {
    
        for (size_t i = 0; i < (ballot->length); i++) {

            free(ballot->entries[i].name);
        }

        free(ballot);
    }

}
    
  

void ballot_insert(ballot_t ballot, char* name)
{
    if (ballot->length < MAX_CANDIDATES) {

        size_t i = ballot->length;

        clean_name(name);

        ballot->entries[i].name = name;
        ballot->entries[i].active = true;

        ballot->length++;

    } else {

        fprintf(stderr, "The ballot is Full, adding this name exceeds MAX_CANDIDATES");

        exit(3);    
    }
}

const char* ballot_leader(ballot_t ballot)
{
    for (size_t i = 0; i < ballot->length; i++) {

        if (ballot->entries[i].active) {

            return ballot->entries[i].name;
            
        } 
    }
    
    return NULL;
}

void ballot_eliminate(ballot_t ballot, const char* name)
{
    for (size_t i =0; i < ballot->length; i++) {

        if (ballot->entries[i].name != NULL) {

            if (strcmp(ballot->entries[i].name, name) == 0) {
            
                ballot->entries[i].active = false;
            }
            
        }
    
    }
}

void count_ballot(vote_count_t vc, ballot_t ballot)
{
    if (ballot_leader(ballot) != NULL) {

        size_t* votes_counted = vc_update(vc, ballot_leader(ballot));

        if (votes_counted == NULL) {

            fprintf(stderr, "no more room in the vote_count map");

            exit(4);
            
        } else {

            *votes_counted += 1;
        }
        
    }
}

ballot_t read_ballot(FILE* inf)
{
   char* current_line = fread_line(inf);

   if (feof(inf) || strcmp(current_line, "%") == 0) {

    free(current_line);

    return NULL;
    
   }

   if ((current_line) == NULL) {

    return NULL;
    
   }

   ballot_t ballot = ballot_create ();

   while ((current_line != NULL) && (strcmp(current_line, "%") != 0)) {

    if (ballot->length >= MAX_CANDIDATES) {

        fprintf(stderr, "excedding number of max candidates");

        exit(3);
        
    } else {

        ballot_insert(ballot, current_line);

        current_line = fread_line(inf);
        
    }
      
   }
   
   free(current_line);
    
   return ballot;

}

void clean_name(char* name)
{

    size_t i = 0;
    size_t j = 0;

    while (name[i] != '\0') {

        if (isalpha(name[i]) != 0) {

            if (isupper(name[i])) {

                name[j] = name[i];
                
            } else {

                name[j] = toupper(name[i]);

            }

            j++;
            
        } else {

            name[j] = name[i+1];
        }

        i++;
    }

    name[j] = '\0';
}

void print_ballot(FILE* outf, ballot_t ballot)
{
    for (size_t i = 0; i < ballot->length; ++i) {
        bool active = ballot->entries[i].active;
        fprintf(outf, "%c%s%s\n",
                active? ' ' : '[',
                ballot->entries[i].name,
                active? "" : "]");
    }
}
